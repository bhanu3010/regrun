import uuid

import gevent
from flask import url_for, current_app, session
from flask_socketio import emit

from models import TestRunner
from utils import current_time
from utils import launch_test_runner
from . import socketio


@socketio.on('run_schedule', namespace="/regrun")
def schedule(message):
    """SocketIO entry-point to validate and submit the request

    :param: Requester who initiates the request.
    :param: Interface through which user intends to submit request.
    :param: Template which translates to a test script in vbb-rest module.
    :param: custom_path to choose from where the test to be initiated
    :param: userID generated by server
    
    """

    # TODO: Add support for custom test path.
    params = message['data']

    print(params)
    name = params.get('requester')
    interface = params.get('interface')
    template = params.get('template')
    custom_path = params.get('custom_path')
    userid = params.get('userid')
    creation_time = current_time()
    config = current_app.config

    # Validate if user passed an int env_id
    try:
        env_id = int(params.get('env_id'))
    except ValueError:
        msg = 'Please select an integer for env_id'
        emit('error', {'data': msg})
        return

    # Validate if another test is running under env_id
    envs = len(TestRunner.query.filter(
        TestRunner.status == 'RUNNING',
        TestRunner.env_id == env_id).all()
               )
    if envs:
        msg = 'Another run in progress on envID# %s, \
        please use a different env_id' % env_id
        emit('error', {'data': msg})
        return

    # Validate if user selected env_id in between 1-100
    try:
        if env_id < 0 or env_id > 100:
            raise ValueError
    except ValueError:
        msg = 'Please choose an env_id in between 1-100'
        emit('error', {'data': msg})
        return

    request_id = len(TestRunner.query.all()) + 1

    test_runner_record = TestRunner(request_id=request_id,
                                    requester=name,
                                    env_id=env_id,
                                    interface=interface,
                                    template=template,
                                    custom_path=custom_path,
                                    creation_time=creation_time,
                                    status='SUBMITTED',
                                    label='info',
                                    run_log='')
    test_runner_record.save()

    # Fork gevent threads to launch tests.
    gevent.spawn(launch_test_runner, config, request_id, template,
                 custom_path,url_for('main.event', _external=True),
                 userid)

    # SocketIO way of URL redirection.
    emit('redirect', {'url': url_for('main.index')})


@socketio.on('connect', namespace='/regrun')
def connect():
    """SocketIO client connect handler

    Generates a random UserID and uses it as an identification token
    to recognize the user.
    """
    userid = str(uuid.uuid4())
    session['userid'] = userid
    current_app.clients[userid] = current_app.extensions['socketio']
    emit('userid', {'userid': userid})
    emit('status', {'status': 'Connected user', 'userid': userid})
